0x26557d272633CEABfADf2D993C46C859e922C56a
0x6A3334c47F2821b1D2998726663E4EfB6Bf20175

Goerli --- 	3.459471452532382644 ETH
After		3.458364405027511635 ETH
			0.0011070475
			0.00110704


0xa18733d7aDE99187389985554eDF9F586e6C2641
0xd8b934580fcE35a11B58C6D73aDeE468a2833fa8
0xd9145CCE52D386f254917e481eB44e9943F39138


Python, JavaScript, C++

--------------------- 20-08-2023 --------------------

npm ---- Node Package Manager



import java.util.*;
import java.util.List;


public int addition(int a, int b){
	return a+b;
}



npm init	


----------- 22-08-2023 -------------------
DOM --->  Document Object Model ====> Memory level representation of your code



React DOM --> Virtual DOM


DIRTY Checking


Library ---> You have to call a library to do some functionality
Framework --> You have to write code in some standards and framework will call your code


------------------ 23-08-2023 ------------------------


functional programming ---> JavaScript(Angular, React, NextJs), Java

Reactive Programming ---> 

incomplete, complete, fail


JavaScipt have three types of variables


let, const, var


let ---> we can re-assign a value to the variable

ex: let x = 10;
	x = 20;

const ---> Only once it can be declared and initialized. If re-assign a value will give an error. const variables should be assigned at declaration time only.

ex: const x = 10;
	x = 20;  X

var ---> Generally, var is used for global declaration. we can re-assign a value easily.

ex: var x  = 10;
	x = 20;

------------------------- 24-08-2023 --------------------


JSX --- JavaScript XML




Import/Export

Members can be exported by adding keyword export

ex: export const x = 10;


Max one member can be exported as default

ex: export default y = 20;


We can export multiple variables at a time at bottom of the file but those should not already exported


ex: const x = 10;
 const  y = 20;

 export { x, y };


We can use aliases at import and export time

ex: const x = 10;

export { x as y};

import y as x from './xyz';


We can import all the exported variables from a particular module file


ex: abc.js

export x = 10;
export y = 20;
export z = 30;

// import in mno

import * as myVars from './abc';

console.log(myVars.x);
console.log(myVars.y);
console.log(myVars.z);


------------------------------- 25-08-2023 ----------------------------

Compiler: There are two types of compilers are used in react development mode

1) JIT : Just in Time --- Instant compilation before loading into browser
2) AOT : Ahead of Time -- Compilation of whole code happens when code gets changed into editor



Two types components

1) Class Component
2) Functional Component


React Class components have some life clycle phases:

1. componentDidMount ---> This method gets called once all component gets rendered into browser dom


------------------------------ 26-08-2023 -------------------------

props ==> Properties

Props always provided at caller level. Props are passed when component is called.

Always pass props to parent class by calling super(props) method in component constructor.

Note: Irrespective of props we should call super(props) as first statement in contructor. If they are getting passed by the caller or not.


Props are always read only properties. We can't re-assign value of props. We can pass props values to child components.

To show nothing in react, they provided one pseudo tag i.e. <></>

When we do conditional loading of an element then either that element will get loaded in DOM or will totally skipped from DOM

callBackHell

----------------------------------- 27-08-2023 ------------------------

JavaScript is asynchronous language. If there is any time require to execute a statement then JavaScript will not wait for that statement and it will go to next statement to execute.


ex: 


setTimeout(() => {
  console.log("Delayed for 5 second.");
}, 5000);

setTimeout(() => {
  console.log("Delayed for 2 second.");
}, 2000);


Whenever we require same type of code repeatedly on UI then we write that code in single component and we call that component repeatedly.


Every individual functionality or element can be treated as a component in react.


Note: Whenever we use map function on any array while rendering, we must give key prop to that rendering element. And key prop must be always unique for that element. Index can be used as key prop in any map function but it will be worst choice because while updating state variable there is no gurantee of same existing indexing will be get followed.




----------------------------- 29-08-2023 ---------------------------


React Hooks



------------------------------- 12-09-2023 --------------------------

API --- Application Programming Interface


GET ---> When we want to fetch some data from server without changing anything in database

POST --> When we want to create/insert some entity on server(in database)

PUT ---> When we want to update some information or data of an entity

DELETE -> When we want to delete some entity from server

PATCH --> When we want to update some information or data of an entity with limited set of data

OPTIONS --> 

Idempotent --> sending the same request multiple times will produce the same result, without changing the state of the server or the resource.

ex: GET, PUT, DELETE


employee --->

empId: 101
name: xyz
mobile: 12345


PUT:

empId: 101
name: xyz
mobile: 56789


PATCH:

empId: 101
mobile: 56789


localhost == 127.0.0.1 

middleware ---> It is a kind of code which will work in middle of some functionality


JSON.stringify ---> To convert JSON into String format
JSON.parse ---> To convert String into JSON format


---------------------------- 13-09-2023 ----------------------------
Headers --> Headers are nothing but metadata



Cookie ---> Biscuit

JWT ===> Json Web Token


You can send data to server in two formats:

1. URL  --> GET, DELETE
2. Body --> POST, PUT, PATCH


GET ---> http://127.0.0.1:9000/empdetails/105

POST --> http://127.0.0.1:9000/empdetails
body: {empId: 105}


GET:


1. Query parameters
2. PATH parameters

usecase: search employees by first name and last name

1. Query parameters:

http://127.0.0.1:9000/empsearch?firstName=Manasi&lastName=Patil
http://127.0.0.1:9000/empsearch?lastName=Patil&firstName=Manasi

2. PATH parameters

http://127.0.0.1:9000/empsearch/Manasi/Patil

--------------------------- 16-09-2023 -------------------------


Relational Databases
ex: Oracle, MySql, PostgreSQL, etc.


Non Relational Databases --> File Database ---> No SQL
ex: MongoDb, DocumentDB(AWS)




Notebook1 ===> emp details
Notebook2 ===> temp address of employee


password: Launchpad_123

3T Studio url: mongodb+srv://admin:Launchpad_123@cluster0.jfp2g81.mongodb.net/
NodeJS: mongodb+srv://admin:Launchpad_123@cluster0.jfp2g81.mongodb.net/?retryWrites=true&w=majority


db.employee.insertOne({
	"empId": 1,
	"empName": "Laxminarayan Chintake",
	"mobile": 123456,
	"salary": 50000
})



6505e0422f02fc10098ae777

db.getCollection("employee").find({})


_id ----> Default unique value generated by mongodb

UUID --- Universally Unique Identifier


async --- await


OOPS ---> Object Oriented Language

employee =={
	empId, empName, mobile,.....
}


Converting circular structure to JSON ---> This issue occurs when object A is being referenced by B and B again referenced by A


emp ==> address ==> emp


------------------------------- 29-09-2023 ---------------------------------

Git 		===> Versioning Control Tool ---> Tortoise SVN
GitHub 	===> Website/Vendor to version the code

GitLab, BitBucket ......

Project ===> Repository


Git Setup

1. Download and install
2. Add Username and Email as configuration
3. Generate SSH Key for your machine -- https://docs.github.com/en/authentication/connecting-to-github-with-ssh/generating-a-new-ssh-key-and-adding-it-to-the-ssh-agent
4. Paste your SSH key to GitHub website



git config --global user.name "<GitHub username>"
git config --global user.email "<GitHub email>"



MarkDown --- Scripting language --> Readme.md



----------------------------- 30-09-2023 ---------------------------------

1. Clone Project/Repository

cmd > git clone <repository URL>
ex: cmd > git clone https://github.com/lgchintake/test.git


2. Check if any changes in the repository

cmd > git status

3. Add all files or folders to the .gitignore file which we don't want to maintain in repository

4. Commit: Number of times we want to save our files or data, we commit to the repository

5. Push: One or more commits together we push to the server

6. Pushing data to the server: add ---> commit ---> push
	a) Add files to commit.
		i) add single file
				cmd > git add <fileName(with path if nested)>
		ex: cmd > git add first.html

		ii) Add all files
				cmd > git add .
	
	b) Commit your changes.
				cmd > git commit -m "<Message>"
		ex: cmd > git commit -m "Added new two files"

	c) Push code to the server.
		cmd > git push


7. See all branches from a repository

cmd > git branch -a

8. See current working branch

cmd > git branch

9. Sync changes from online(github.com --> new branch, delete branch) to offline

cmd > git pull

10. Switch between branches

	cmd > git checkout <branch_name>
ex cmd > git checkout laxminarayan-branch

11. Pull Request (PR) 

--------------------------- 01-10-2023 -----------------------


12. Create branch on local and push it to online repository

	i. Create a new branch in local with new name
				cmd > git checkout -b <branch_name>
		ex: cmd > git checkout -b my_branch

	ii. commit code in branch

	iii. Push latest branch and its all commits to GitHub

	cmd > git push --set-upstream origin basic-architecture


================== RetailStore ===================


1. List of items
2. Add new Item
3. Edit item details
4. Add item category
5. Edit item category
6. List of item category


<%   %>


=========================== 03-10-2023 =======================

Testing Framework: Mocha

Unit Testing: 


=========================== 04-10-2023 =======================

Code Coverage: The number of lines tested by your testing code


================================================ 08-10-2023 =======================================

Bootstrap grid ==> 12


v3 --> xs, sm, md, lg

v5 --> 

12 --> 6/6 ---> 4/4/4 ---> 3/3/3/3 --> 2/2/2/2/2/2 

var ten = '11px';

.first{
	left-padding: ${ten};
	......
}

.second{
	left-padding: ${ten};
	......
}



================================================ 09-10-2023 =======================================

$ ---> jQuery


$( "button.continue" ).html( "Next Step..." )
jQuery( "button.continue" ).html( "Next Step..." )




react --> jQuery --> 3.0
xyz ----> jQuery --> 2.5




















